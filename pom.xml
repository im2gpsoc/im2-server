<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>uk.gov.hscic.im2</groupId>
	<artifactId>im2-server</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>

	<name>GPSoC IM2 Server</name>

	<dependencies>

		<!-- This dependency includes the core HAPI-FHIR classes -->
		<dependency>
			<groupId>ca.uhn.hapi.fhir</groupId>
			<artifactId>hapi-fhir-base</artifactId>
			<version>1.0</version>
		</dependency>
		
		<!-- At least one "structures" JAR must also be included -->
		<dependency>
			<groupId>ca.uhn.hapi.fhir</groupId>
			<artifactId>hapi-fhir-structures-dstu2</artifactId>
			<version>1.0</version>
		</dependency>

		<!-- 
		This dependency includes the JPA server itself, which is packaged
		separately from the rest of HAPI FHIR 
		-->
		<dependency>
			<groupId>ca.uhn.hapi.fhir</groupId>
			<artifactId>hapi-fhir-jpaserver-base</artifactId>
			<version>1.0</version>
		</dependency>

		<!-- This dependency is used for the "FHIR Tester" web app overlay -->
		<dependency>
			<groupId>ca.uhn.hapi.fhir</groupId>
			<artifactId>hapi-fhir-testpage-overlay</artifactId>
			<version>1.0</version>
			<type>war</type>
			<scope>provided</scope>		
		</dependency>

		<!-- 
		HAPI-FHIR uses Logback for logging support. The logback library is included 
		automatically by Maven as a part of the hapi-fhir-base dependency, but you 
		also need to include a logging library. Logback is used here, but log4j
		would also be fine. 
		-->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.1.2</version>
		</dependency>

		<!-- Needed for JEE/Servlet support -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.0.1</version>
			<scope>provided</scope>
		</dependency>

		<!-- 
		If you are using HAPI narrative generation, you will need to include Thymeleaf
		as well. Otherwise the following can be omitted.
		 -->
		<dependency>
			<groupId>org.thymeleaf</groupId>
			<artifactId>thymeleaf</artifactId>
			<version>2.1.4.RELEASE</version>
		</dependency>

		<!-- Used for CORS support -->
		<dependency>
			<groupId>org.ebaysf.web</groupId>
			<artifactId>cors-filter</artifactId>
			<version>1.0.1</version>
			<exclusions>
				<exclusion>
					<artifactId>servlet-api</artifactId>
					<groupId>javax.servlet</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		
		<!-- 
		Spring Web is used to deploy the server to a
		web container.
		-->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>4.1.3.RELEASE</version>
			<scope>provided</scope>
		</dependency>

		<!--
		You may not need this if you are deploying to an application server which
		provides database connection pools itself.
		-->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-dbcp2</artifactId>
			<version>2.0.1</version>
		</dependency>

		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>9.4-1201-jdbc4</version>
		</dependency>

	</dependencies>

	<properties>
	    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<skip-hib4>false</skip-hib4>
	</properties>

	<build>
		
		<!-- 
		Tells Maven to name the generated WAR file as
		im2-server.war
		-->
		<finalName>im2-server</finalName>
		
		<!-- 
		The following is not required for the application to build, but
		allows you to test it by issuing "mvn jetty:run" from the command
		line. 
		-->
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.eclipse.jetty</groupId>
					<artifactId>jetty-maven-plugin</artifactId>
					<version>9.1.1.v20140108</version>
					<configuration>
						<webApp>
							<contextPath>/im2-server</contextPath>
						</webApp>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	
		<plugins>
			<!-- 
			Tell Maven which Java source version you want to use
			-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>
			
			<!-- 
			The configuration here tells the WAR plugin to include the FHIR Tester
			overlay. You can omit it if you are not using that feature.
			-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<overlays>
						<overlay>
							<groupId>ca.uhn.hapi.fhir</groupId>
							<artifactId>hapi-fhir-testpage-overlay</artifactId>
						</overlay>
					</overlays>
				</configuration>
			</plugin>
    		
			<plugin>
				<groupId>de.juplo</groupId>
				<artifactId>hibernate4-maven-plugin</artifactId>
				<version>1.0.5</version>
				<configuration>
					<force>true</force>
					<target>SCRIPT</target>
					<skip>${skip-hib4}</skip>
				</configuration>
				<!--
				This needs to be uncommented in order for this plugin to work with
				Hibernate 4.3+ (as of hibernate4-maven-plugin version 1.0.5)
				<dependencies>
					<dependency>
						<groupId>org.hibernate</groupId>
						<artifactId>hibernate-core</artifactId>
						<version>${hibernate_version}</version>
					</dependency>
				</dependencies>
				-->
				<executions>
 					<execution>
						<id>postgresql</id>
						<goals>
							<goal>export</goal>
						</goals>
						<phase>test</phase>
						<configuration>
							<hibernateDialect>org.hibernate.dialect.PostgreSQLDialect</hibernateDialect>
							<outputFile>${project.build.directory}/schema_postgresql.sql</outputFile>
						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>

</project>
